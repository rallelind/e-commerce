// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String?
  image       String[]
  price       Int
  dates       String[]
  features    String[]
  published   Boolean  @default(true)
  author      User?    @relation(fields: [authorId], references: [id])
  orders      Order[]
  authorId    String?
  bookedDates String[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime? @map("email_verified")
  image           String?
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
  posts           Post[]
  accounts        Account[]
  sessions        Session[]
  orders          Order[]
  stripeConnect   Boolean   @default(false)
  stripeConnectId String?   @unique
  host            Boolean   @default(false)

  @@map(name: "users")
}

model Order {
  id                    String   @id @default(cuid())
  authorId              String?
  productId             String?
  startDate             DateTime @db.Date
  endDate               DateTime @db.Date
  user                  User?    @relation(fields: [authorId], references: [id])
  product               Post?    @relation(fields: [productId], references: [id])
  accepted              Boolean  @default(false)
  stripePaymentIntentId String?
  userSeen              Boolean  @default(false)
  ownerSeen             Boolean  @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
